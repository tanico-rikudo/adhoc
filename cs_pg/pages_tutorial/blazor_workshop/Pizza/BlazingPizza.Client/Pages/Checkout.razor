@page "/checkout"
@attribute [Authorize]
@inject OrderState OrderState
@inject OrdersClient OrdersClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Blazing Pizza - Checkout</PageTitle>

<div class="main">

    <EditForm Model="OrderState.order.DeliveryAddress" OnValidSubmit="PlaceOrder">
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="OrderState.order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to......</h4>
                <AddressEditor Address="OrderState.order.DeliveryAddress" />
            </div>

        </div>
        <button class="checkout-button btn btn-warning" type="submit" disabled="@isSubmitting">
            Place order
        </button>
    </EditForm>
    <DataAnnotationsValidator />
    @* <ValidationSummary /> *@
</div>

@code
{
    bool isSubmitting = false;

    async Task PlaceOrder()
    {
        isSubmitting = true;
        try
        {
            var newOrderId = await OrdersClient.PlaceOrder(OrderState.order);
            OrderState.ResetOrder();
            NavigationManager.NavigateTo($"myorders/{newOrderId}");
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }

    }

    protected override void OnInitialized()
    {
        _ = RequestNotioficationSubscriptionAsync();
    }

    async Task RequestNotioficationSubscriptionAsync()
    {
        var subscription = await JSRuntime.InvokeAsync<NotificationSubscription>("blazorPushNotifications.requestSubscription");
        if (subscription is not null)
        {
            try
            {
                await OrdersClient.SubscribeToNotifications(subscription);
            }
            catch (AccessTokenNotAvailableException ex)
            {
                ex.Redirect();
            }
        }
    }
}