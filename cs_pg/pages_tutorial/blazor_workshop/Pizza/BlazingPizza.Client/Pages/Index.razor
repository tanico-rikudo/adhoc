@page "/"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject IJSRuntime JS

<div class="main">
    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                @* <li onclick="@(()=>Console.WriteLine(special.Name))" style="background-image: url('@special.ImageUrl')"> *@
                <li @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))"
            style="background-image: url('@special.ImageUrl')">
            <div class="pizza-info">
                <span class="title">@special.Name</span>
                @special.Description
                <span class="price">@special.GetFormattedBasePrice()</span>
            </div>
        </li>
            }
        }
    </ul>
</div>
<div class="sidebar">
    @if (OrderState.order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>
            @foreach (var configuredPizza in OrderState.order.Pizzas)
            {
                <ConfiguredPizzaItem Pizza="configuredPizza" OnRemoved="@(()=>RemovePizza(configuredPizza))" />
                @* <ConfiguredPizzaItem Pizza="configuredPizza"
        OnRemoved="@(()=>OrderState.RemoveConfiguredPizza(configuredPizza))" /> *@
            }
        </div>
    }
    else
    {
        <div class="empty-cart">
            <p>Your order is empty</p>
        </div>
    }
    <div class="order-total @(OrderState.order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@OrderState.order.GetFormattedTotalPrice()</span>
        @* <button class="btn btn-warning" disabled="@(OrderState.order.Pizzas.Count==0)" @onclick="PlaceOrder">
        Checkout
        </button> *@
        <a href="checkout"
            class="@(OrderState.order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

<TemplatedDialog Show="OrderState.ShowingConfigureDialog">
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnCancel="OrderState.CancelConfigurePizzaDialog"
        OnConfirm="OrderState.ConfirmConfigurePizzaDialog" />
</TemplatedDialog>

@code {
    List<PizzaSpecial>? specials;
    Order order => OrderState.order;


    @* https://blazor-master.com/component-lifecycle/ *@
    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>("specials");
    }

    async Task RemovePizza(Pizza configuredPizza)
    {
        if (await JS.Confirm($"Remove {configuredPizza.Special.Name} from your order?"))
        {
            OrderState.RemoveConfiguredPizza(configuredPizza);
        }
    }
}
